name: CI

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKERHUB_USERNAME: nokal
  DOCKERHUB_REPO: nokal/simod

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.versioning.outputs.version }}
      docker_image: ${{ env.DOCKERHUB_REPO }}:${{ steps.versioning.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Compose a version
        id: versioning
        uses: paulhatch/semantic-version@v4.0.2
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          format: "${major}.${minor}.${patch}-prerelease${increment}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:latest,${{ env.DOCKERHUB_REPO }}:${{ steps.versioning.outputs.version }}
          file: docker/simod_build.dockerfile
          context: docker/
          platforms: linux/amd64,linux/arm64

      - name: Create a release
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.version }}
          release_name: ${{ steps.versioning.outputs.version }}
          prerelease: true

  test:
    needs: [ build ]
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build.outputs.docker_image }}
    env:
      BRANCH_NAME: master
    steps:
      - name: Testing
        shell: bash
        run: |
          Xvfb :99 &>/dev/null & disown
          cd /usr/src/Simod
          source venv/bin/activate
          pytest --cov=. --cov-report=xml --durations=0 -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          name: codecov-umbrella
          verbose: true